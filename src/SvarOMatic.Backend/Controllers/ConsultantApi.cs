/*
 * Swagger - Svar-o-Matic
 *
 * This is the backend for a solution that allows employees of Miles AS to efficiently match incoming project requests with existing consultant expertise.  Some useful links: - [The Svar-o-Matic repository](https://github.com/miles-no/svar-o-matic)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: drift@miles.no
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using SvarOMatic.Attributes;
using SvarOMatic.Models;

namespace SvarOMatic.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ConsultantApiController : ControllerBase
    {
        /// <summary>
        /// Get basic information about a consultant
        /// </summary>
        /// <remarks></remarks>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/info/get")]
        [ValidateModelState]
        [SwaggerOperation("GetConsultantInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "successful operation")]
        public virtual IActionResult GetConsultantInfo()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            var example = new Consultant
            {
                Id = 13,
                FirstName = "John",
                LastName = "Doe",
                Email = @"john.doe@miles.no"
            };
            return new ObjectResult(example);
        }

        /// <summary>
        /// Finds all CVs, skjemaer and style-guides applicable for a consultant
        /// </summary>
        /// <remarks>Multiple docs (CV, skjema and/or style guide) values can be provided with comma separated strings</remarks>
        /// <param name="consultantId">Id of the consultant that the search is limited to</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/docsForConsultant/{consultantId}/get")]
        [ValidateModelState]
        [SwaggerOperation("FindDocsForConsultant")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "successful operation")]
        public virtual IActionResult FindDocsForConsultant([FromRoute][Required]long? consultantId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
                        : default(List<Object>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
