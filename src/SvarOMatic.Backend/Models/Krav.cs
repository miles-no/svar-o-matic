/*
 * Swagger - Svar-o-Matic
 *
 * This is the backend for a solution that allows employees of Miles AS to efficiently match incoming project requests with existing consultant expertise.  Some useful links: - [The Svar-o-Matic repository](https://github.com/miles-no/svar-o-matic)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: drift@miles.no
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace SvarOMatic.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Krav : IEquatable<Krav>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets InquiryId
        /// </summary>

        [DataMember(Name="inquiryId")]
        public long? InquiryId { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>

        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets IsMustHave
        /// </summary>

        [DataMember(Name="isMustHave")]
        public bool? IsMustHave { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Krav {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InquiryId: ").Append(InquiryId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  IsMustHave: ").Append(IsMustHave).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Krav)obj);
        }

        /// <summary>
        /// Returns true if Krav instances are equal
        /// </summary>
        /// <param name="other">Instance of Krav to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Krav other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    InquiryId == other.InquiryId ||
                    InquiryId != null &&
                    InquiryId.Equals(other.InquiryId)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    IsMustHave == other.IsMustHave ||
                    IsMustHave != null &&
                    IsMustHave.Equals(other.IsMustHave)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (InquiryId != null)
                    hashCode = hashCode * 59 + InquiryId.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (IsMustHave != null)
                    hashCode = hashCode * 59 + IsMustHave.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Krav left, Krav right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Krav left, Krav right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
